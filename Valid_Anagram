Brute Approach 

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()) {
            return false;
        }

        int n = s.length();

        for(int i=0; i<n; i++) {
            for(int j=0; j<t.length(); j++) {
                if(s.charAt(i) == t.charAt(j)) {
                    t = t.substring(0, j) + t.substring(j+1);
                    break;
                }
            }
        }

        if(t.length() > 0) {
            return false;
        } else {
            return true;
        }
    }
}

Time Complexity : O(n^2)
Space Complexity : O(1)

Optimized Approach 

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()) {
            return false;
        }
        int st[] = new int[26];

        for(char ch : s.toCharArray()) {
            st[ch - 'a']++;
        }

        for(char ch : t.toCharArray()) {
            st[ch - 'a']--;
        }

        for(int i : st) {
            if(i != 0) {
                return false;
            }
        }

        return true;
    }
}
