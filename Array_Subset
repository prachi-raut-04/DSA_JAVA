Approach 1
class Solution {
    public boolean isSubset(int a[], int b[]) {
        Arrays.sort(a);
        Arrays.sort(b);
        int n = a.length;
        int m = b.length;
        int i = 0;
        int j = 0;
       
        while(i < n && j < m) {
            if(a[i] == b[j]) {
                i++;
                j++;
                continue;
            }
            i++;
        }      
       
        if(j == m) {
            return true;
        } else {
            return false;
        }
       
    }
}  

Time Complexity : O(nlogn)
Space Complexity : O(1
)

Approach 2

class Solution {
    public boolean isSubset(int a[], int b[]) {
        HashMap<Integer, Integer> mapA = new HashMap<>();
        for(int num : a) {
             mapA.put(num, mapA.getOrDefault(num, 0) + 1);
        }
       
        for(int num : b) {
            if(!mapA.containsKey(num)) {
                return false;
            }
            int count = mapA.get(num);
            if (count == 0) {
                return false;
            }
            mapA.put(num, count - 1);
        }
       
        return true;
    }
}

Time Complexity : O(n)
Space Complexity : O(n)
