Approach 1 (Brute force approach) 

class Solution {
    public int maxProfit(int[] p) {
        int n = p.length;
        int profit = 0;

        for(int i=0; i<n; i++) {
            for(int j=i+1; j<n; j++) {
                profit = Math.max(profit, p[j] - p[i]);
            }
        }

        return profit;
    }
}

Time Complexity : O(n^2)
Space Complexity : O(1)

Approach 2 (Optimized approach)

class Solution {
    public int maxProfit(int[] p) {
        int profit = 0;
        int bp = Integer.MAX_VALUE;

        for(int prices : p) {
            if(bp > prices) {
                bp = prices;
            }
            
            profit = Math.max(profit, prices - bp);
            
        }

        return profit;
    }
}

Time Complexity : O(n)
Space Complexity : 
