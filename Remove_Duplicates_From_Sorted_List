Approach 1 

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next == null) {
            return head;
        }
        ListNode prev = head;
        ListNode temp = head.next;
        while(temp != null) {
            if(prev.val == temp.val) {
                prev.next = temp.next;
            } else {
                prev = prev.next;
            }
            temp = temp.next;
        }
        return head;
    }
}

Time Complexity : O(n)
Space Complexity : O(1)

Approach 2

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode temp = head;

        while(temp != null && temp.next != null) {
            ListNode nextNode = temp.next;
            while(nextNode != null && temp.val == nextNode.val) {
                nextNode = nextNode.next;
            }
            temp.next = nextNode;
            temp = temp.next;
        }

        return head;
    }
}

Time Complexity : O(n)
Space Complexity : O(1)
