Approach 1

class Solution {
    public boolean isValid(String s) {
        int n = s.length();

        if((n & 1) == 1) {
            return false;
        }

        Stack<Character> st = new Stack<>();

        for(char curr : s.toCharArray()) {
            if(curr == '(' || curr == '{' || curr == '[') {
                st.push(curr);
            } else if((st.isEmpty()) || (curr == ')' && st.peek() != '(') || (curr == '}' && st.peek() != '{') || (curr == ']' && st.peek() != '[')) {
                return false;
            } else {
                st.pop();
            }
        }

        if(st.isEmpty()) {
            return true;
        } else {
            return false;
        }
    }
}

Approach 2

class Solution {
    public boolean isValid(String s) {
        if(s.length() % 2 != 0) {
            return false;
        }

        char st[] = new char[s.length()];
        int top = -1;
        for(char c : s.toCharArray()) {
            if(c == '(') {
                st[++top] = ')';
            } else if(c == '{') {
                st[++top] = '}';
            } else if(c == '[') {
                st[++top] = ']';
            } else if(top == -1 || st[top--] != c) {
                return false;
            } 
        }

        return top == -1;
    }
}

Time Complexity : O(n)
Space Complexity : O(n)
