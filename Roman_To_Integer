Approach 1 

class Solution {
    public int romanToInt(String s) {
        HashMap<Character, Integer> value = new HashMap<>();
        value.put('I', 1);
        value.put('V', 5);
        value.put('X', 10);
        value.put('L', 50);
        value.put('C', 100);
        value.put('D', 500);
        value.put('M', 1000);

        int sum = 0;
        int n = s.length();

        for (int i=0; i<n-1; i++) {
            int curr = value.get(s.charAt(i));
            int next = value.get(s.charAt(i+1));
            if(curr >= next) {
                sum += curr;
            } else {
                sum -= curr;
            }
        }

        return sum + value.get(s.charAt(n-1));
    }
}

Time Complexity : O(n)
Space Complexity : O(1)

Approach 2

class Solution {
    public int getValue(char ch) {
        if(ch == 'M') return 1000;
        else if(ch == 'D') return 500;
        else if(ch == 'C') return 100;
        else if(ch == 'L') return 50;
        else if(ch == 'X') return 10;
        else if(ch == 'V') return 5;
        else return 1;
    }
    public int romanToInt(String s) {
        int sum = 0;
        int n = s.length();

        int prev = getValue(s.charAt(0));

        for (int i=0; i<n-1; i++) {
            int curr = prev;
            int next = getValue(s.charAt(i+1));
            if(curr >= next) {
                sum += curr;
            } else {
                sum -= curr;
            }
            prev = next;
        }

        return sum + getValue(s.charAt(n-1));
    }
}

Time Complexity : 
