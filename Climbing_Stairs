Approach 1 (Brute force)

class Solution {
    public int climbStairs(int n) {
        if(n == 0 || n == 1) return 1;
        return climbStairs(n-1) + climbStairs(n-2);
    }
}

Time Complexity : O(2^n)
Space Complexity : O(n)

Approach 2 (Optimezed Time Complexity) 

class Solution {
    public int climbRec(int n, Map<Integer, Integer> memo) {
        if(n == 0 || n == 1) {
            memo.put(n, 1);
            return 1;
        }
        if(memo.containsKey(n)) {
            return memo.get(n);
        }
        int climbVal = climbRec(n-1, memo) + climbRec(n-2, memo);
        memo.put(n, climbVal);
        return climbVal;
    }
    public int climbStairs(int n) {
        Map<Integer, Integer> memo = new HashMap<>();
        return climbRec(n, memo);
    }
}

Time Complexity : O(n)
Space Complexity : O(n)

Apprach 3 (Optimized Approach)

class Solution {
    public int climbStairs(int n) {
        if(n == 0 || n == 1) return 1;
        int a = 1;
        int b = 1;
        for(int i=2; i<=n; i++) {
            int temp = a + b;
            a = b;
            b = temp;
        }
        return b;
    }
}

Time Complexity : O(n)
