Brute Force Approach

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int n = nums.length;

        for(int i=0; i<n; i++) {
            int len = i + k;
            while(len >= n) len--;
            for(int j=i+1; j<=len; j++) {
                if(nums[i] == nums[j]) {
                    return true;
                }
            }
        }

        return false;
    }
}

Time Complexity : O(n * k)
Space Complexity : O(1)

Optimized Approach 

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int n = nums.length;

        for(int i=0; i<n; i++) {
            if(map.containsKey(nums[i]) && i - map.get(nums[i]) <= k) {
                return true;
            }
            map.put(nums[i], i);
        }

        return false;
    }
}

Time Complexity : O()
Space Complexity : O()
