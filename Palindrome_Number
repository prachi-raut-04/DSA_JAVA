Approach 1

class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0) {
            return false;  
        }

        String num = String.valueOf(x);
        int l = 0;
        int r = num.length() - 1;

        while (l < r) {
            if (num.charAt(l) != num.charAt(r)) {
                return false;
            }
            l++;
            r--;
        }

        return true;
    }
}

Time Complexity : O(log₁₀(x))
Space Complexity : O(log₁₀(x))

Approach 2

class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0) return false; 
        int n = x;
        int rev = 0;

        while(n > 0) {
            int lastDigit = n % 10;
            n = n / 10;
            rev = rev * 10 + lastDigit;
        }

        if(rev == x) {
            return true;
        } else {
            return false;
        }
    }
 }

Time Complexity : O(log₁₀(x))
Space Complexity : O(1)
