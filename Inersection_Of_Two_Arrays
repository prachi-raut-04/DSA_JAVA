Approach 1 

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set1 = new HashSet<>();
        HashSet<Integer> res = new HashSet<>();

        for (int i = 0; i < nums1.length; i++) {
            set1.add(nums1[i]);
        }

        for (int i = 0; i < nums2.length; i++) {
            if (set1.contains(nums2[i])) {
                res.add(nums2[i]); 
            }
        }

        int[] ans = new int[res.size()];
        int index = 0;
        for (int num : res) {
            ans[index++] = num;
        }

        return ans;
    }
}

Approach 2

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        int nums[] = new int[1001];
        int res[] = new int[Math.min(nums1.length, nums2.length)];
        int idx = 0;

        for(int num : nums1) {
            nums[num] = 1;
        }
        
        for(int num : nums2) {
            if(nums[num] == 1) {
                res[idx++] = num;
                nums[num] = 0;
            }
        }

        int ans[] = new int[idx];

        for(int i=0; i<idx; i++) {
            ans[i] = res[i]; 
        }

        return ans;
    }
}

Time Complexity : O(n1 + n2)
Space Complexity : O(min(n1, n2)
