Code

class Solution {
    public List<String> res = new ArrayList<>();

    public void treePath(TreeNode root, StringBuilder sb) {
        if(root == null) return;
        
        int len = sb.length();
        if(root.right == null && root.left == null) {
            sb.append(root.val);
            res.add(sb.toString());
            sb.setLength(len);
            return;
        }

        sb.append(root.val).append("->");
        treePath(root.left, sb);
        treePath(root.right, sb);

        sb.setLength(len);
    }
    public List<String> binaryTreePaths(TreeNode root) {
        treePath(root, new StringBuilder(""));
        return res;
    }
}

Time Complexity  
Balanced Tree : O(n log n)
Skewed Tree : O(n ^ 2)

Space Complexity 
Balanced Tree : O()
